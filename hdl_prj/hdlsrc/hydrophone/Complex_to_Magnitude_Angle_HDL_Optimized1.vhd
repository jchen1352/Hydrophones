-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\hydrophone\Complex_to_Magnitude_Angle_HDL_Optimized1.vhd
-- Created: 2017-07-03 12:54:44
-- 
-- Generated by MATLAB 9.2 and HDL Coder 3.10
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex_to_Magnitude_Angle_HDL_Optimized1
-- Source Path: hydrophone/Subsystem/Complex to Magnitude-Angle HDL Optimized1
-- Hierarchy Level: 1
-- 
-- Complex to Magnitude-Angle HDL Optimized
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex_to_Magnitude_Angle_HDL_Optimized1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In_re                             :   IN    std_logic_vector(25 DOWNTO 0);  -- sfix26_En14
        In_im                             :   IN    std_logic_vector(25 DOWNTO 0);  -- sfix26_En14
        validIn                           :   IN    std_logic;
        magnitude                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En14
        validOut                          :   OUT   std_logic
        );
END Complex_to_Magnitude_Angle_HDL_Optimized1;


ARCHITECTURE rtl OF Complex_to_Magnitude_Angle_HDL_Optimized1 IS

  -- Component Declarations
  COMPONENT Quadrant_Mapper_block
    PORT( xin                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_E14
          yin                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_E14
          xout                            :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_E14
          yout                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_E14
          );
  END COMPONENT;

  COMPONENT CORDIC_Iteration_block
    PORT( xin                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_E14
          yin                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_E14
          idx                             :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          xout                            :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_E14
          yout                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_E14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Quadrant_Mapper_block
    USE ENTITY work.Quadrant_Mapper_block(rtl);

  FOR ALL : CORDIC_Iteration_block
    USE ENTITY work.CORDIC_Iteration_block(rtl);

  -- Signals
  SIGNAL Delay_ValidIn_reg                : std_logic_vector(0 TO 25);  -- ufix1 [26]
  SIGNAL ValidOutDelayed                  : std_logic;  -- ufix1
  SIGNAL In_re_signed                     : signed(25 DOWNTO 0);  -- sfix26_En14
  SIGNAL In_im_signed                     : signed(25 DOWNTO 0);  -- sfix26_En14
  SIGNAL qMapReal                         : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL qMapImag                         : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL XQMapped                         : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yQMapped                         : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL XQMapped_signed                  : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yQMapped_signed                  : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin1                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin1                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift1                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout1                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout1                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout1_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout1_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin2                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin2                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift2                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout2                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout2                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout2_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout2_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin3                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin3                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift3                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout3                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout3                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout3_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout3_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin4                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin4                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift4                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout4                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout4                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout4_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout4_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin5                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin5                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift5                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout5                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout5                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout5_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout5_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin6                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin6                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift6                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout6                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout6                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout6_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout6_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin7                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin7                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift7                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout7                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout7                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout7_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout7_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin8                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin8                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift8                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout8                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout8                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout8_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout8_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin9                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin9                             : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift9                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout9                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout9                            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout9_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout9_signed                     : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin10                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin10                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift10                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout10                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout10                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout10_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout10_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin11                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin11                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift11                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout11                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout11                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout11_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout11_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin12                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin12                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift12                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout12                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout12                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout12_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout12_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin13                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin13                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift13                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout13                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout13                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout13_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout13_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin14                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin14                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift14                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout14                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout14                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout14_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout14_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin15                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin15                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift15                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout15                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout15                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout15_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout15_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin16                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin16                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift16                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout16                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout16                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout16_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout16_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin17                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin17                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift17                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout17                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout17                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout17_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout17_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin18                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin18                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift18                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout18                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout18                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout18_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout18_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin19                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin19                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift19                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout19                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout19                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout19_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout19_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin20                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin20                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift20                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout20                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout20                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout20_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout20_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin21                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin21                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift21                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout21                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout21                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout21_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout21_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin22                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin22                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift22                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout22                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout22                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout22_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout22_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin23                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin23                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift23                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout23                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout23                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout23_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout23_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin24                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin24                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift24                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout24                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout24                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout24_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yout24_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin25                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL yin25                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL shift25                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL xout25                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL yout25                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL xout25_signed                    : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL reset_1                          : std_logic;  -- ufix1
  SIGNAL xin26                            : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL CSD_Gain_Factor_mul_temp         : signed(54 DOWNTO 0);  -- sfix55_En13
  SIGNAL CSD_Gain_Factor_cast             : signed(53 DOWNTO 0);  -- sfix54_En13
  SIGNAL xoutscaled                       : signed(26 DOWNTO 0);  -- sfix27_E14
  SIGNAL xin27                            : signed(26 DOWNTO 0);  -- sfix27_E14

BEGIN
  u_QuadrantMapper : Quadrant_Mapper_block
    PORT MAP( xin => std_logic_vector(qMapReal),  -- sfix27_E14
              yin => std_logic_vector(qMapImag),  -- sfix27_E14
              xout => XQMapped,  -- sfix27_E14
              yout => yQMapped  -- sfix27_E14
              );

  u_Iteration : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin1),  -- sfix27_E14
              yin => std_logic_vector(yin1),  -- sfix27_E14
              idx => std_logic_vector(shift1),  -- ufix6
              xout => xout1,  -- sfix27_E14
              yout => yout1  -- sfix27_E14
              );

  u_Iteration_1 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin2),  -- sfix27_E14
              yin => std_logic_vector(yin2),  -- sfix27_E14
              idx => std_logic_vector(shift2),  -- ufix6
              xout => xout2,  -- sfix27_E14
              yout => yout2  -- sfix27_E14
              );

  u_Iteration_2 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin3),  -- sfix27_E14
              yin => std_logic_vector(yin3),  -- sfix27_E14
              idx => std_logic_vector(shift3),  -- ufix6
              xout => xout3,  -- sfix27_E14
              yout => yout3  -- sfix27_E14
              );

  u_Iteration_3 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin4),  -- sfix27_E14
              yin => std_logic_vector(yin4),  -- sfix27_E14
              idx => std_logic_vector(shift4),  -- ufix6
              xout => xout4,  -- sfix27_E14
              yout => yout4  -- sfix27_E14
              );

  u_Iteration_4 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin5),  -- sfix27_E14
              yin => std_logic_vector(yin5),  -- sfix27_E14
              idx => std_logic_vector(shift5),  -- ufix6
              xout => xout5,  -- sfix27_E14
              yout => yout5  -- sfix27_E14
              );

  u_Iteration_5 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin6),  -- sfix27_E14
              yin => std_logic_vector(yin6),  -- sfix27_E14
              idx => std_logic_vector(shift6),  -- ufix6
              xout => xout6,  -- sfix27_E14
              yout => yout6  -- sfix27_E14
              );

  u_Iteration_6 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin7),  -- sfix27_E14
              yin => std_logic_vector(yin7),  -- sfix27_E14
              idx => std_logic_vector(shift7),  -- ufix6
              xout => xout7,  -- sfix27_E14
              yout => yout7  -- sfix27_E14
              );

  u_Iteration_7 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin8),  -- sfix27_E14
              yin => std_logic_vector(yin8),  -- sfix27_E14
              idx => std_logic_vector(shift8),  -- ufix6
              xout => xout8,  -- sfix27_E14
              yout => yout8  -- sfix27_E14
              );

  u_Iteration_8 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin9),  -- sfix27_E14
              yin => std_logic_vector(yin9),  -- sfix27_E14
              idx => std_logic_vector(shift9),  -- ufix6
              xout => xout9,  -- sfix27_E14
              yout => yout9  -- sfix27_E14
              );

  u_Iteration_9 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin10),  -- sfix27_E14
              yin => std_logic_vector(yin10),  -- sfix27_E14
              idx => std_logic_vector(shift10),  -- ufix6
              xout => xout10,  -- sfix27_E14
              yout => yout10  -- sfix27_E14
              );

  u_Iteration_10 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin11),  -- sfix27_E14
              yin => std_logic_vector(yin11),  -- sfix27_E14
              idx => std_logic_vector(shift11),  -- ufix6
              xout => xout11,  -- sfix27_E14
              yout => yout11  -- sfix27_E14
              );

  u_Iteration_11 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin12),  -- sfix27_E14
              yin => std_logic_vector(yin12),  -- sfix27_E14
              idx => std_logic_vector(shift12),  -- ufix6
              xout => xout12,  -- sfix27_E14
              yout => yout12  -- sfix27_E14
              );

  u_Iteration_12 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin13),  -- sfix27_E14
              yin => std_logic_vector(yin13),  -- sfix27_E14
              idx => std_logic_vector(shift13),  -- ufix6
              xout => xout13,  -- sfix27_E14
              yout => yout13  -- sfix27_E14
              );

  u_Iteration_13 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin14),  -- sfix27_E14
              yin => std_logic_vector(yin14),  -- sfix27_E14
              idx => std_logic_vector(shift14),  -- ufix6
              xout => xout14,  -- sfix27_E14
              yout => yout14  -- sfix27_E14
              );

  u_Iteration_14 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin15),  -- sfix27_E14
              yin => std_logic_vector(yin15),  -- sfix27_E14
              idx => std_logic_vector(shift15),  -- ufix6
              xout => xout15,  -- sfix27_E14
              yout => yout15  -- sfix27_E14
              );

  u_Iteration_15 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin16),  -- sfix27_E14
              yin => std_logic_vector(yin16),  -- sfix27_E14
              idx => std_logic_vector(shift16),  -- ufix6
              xout => xout16,  -- sfix27_E14
              yout => yout16  -- sfix27_E14
              );

  u_Iteration_16 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin17),  -- sfix27_E14
              yin => std_logic_vector(yin17),  -- sfix27_E14
              idx => std_logic_vector(shift17),  -- ufix6
              xout => xout17,  -- sfix27_E14
              yout => yout17  -- sfix27_E14
              );

  u_Iteration_17 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin18),  -- sfix27_E14
              yin => std_logic_vector(yin18),  -- sfix27_E14
              idx => std_logic_vector(shift18),  -- ufix6
              xout => xout18,  -- sfix27_E14
              yout => yout18  -- sfix27_E14
              );

  u_Iteration_18 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin19),  -- sfix27_E14
              yin => std_logic_vector(yin19),  -- sfix27_E14
              idx => std_logic_vector(shift19),  -- ufix6
              xout => xout19,  -- sfix27_E14
              yout => yout19  -- sfix27_E14
              );

  u_Iteration_19 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin20),  -- sfix27_E14
              yin => std_logic_vector(yin20),  -- sfix27_E14
              idx => std_logic_vector(shift20),  -- ufix6
              xout => xout20,  -- sfix27_E14
              yout => yout20  -- sfix27_E14
              );

  u_Iteration_20 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin21),  -- sfix27_E14
              yin => std_logic_vector(yin21),  -- sfix27_E14
              idx => std_logic_vector(shift21),  -- ufix6
              xout => xout21,  -- sfix27_E14
              yout => yout21  -- sfix27_E14
              );

  u_Iteration_21 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin22),  -- sfix27_E14
              yin => std_logic_vector(yin22),  -- sfix27_E14
              idx => std_logic_vector(shift22),  -- ufix6
              xout => xout22,  -- sfix27_E14
              yout => yout22  -- sfix27_E14
              );

  u_Iteration_22 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin23),  -- sfix27_E14
              yin => std_logic_vector(yin23),  -- sfix27_E14
              idx => std_logic_vector(shift23),  -- ufix6
              xout => xout23,  -- sfix27_E14
              yout => yout23  -- sfix27_E14
              );

  u_Iteration_23 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin24),  -- sfix27_E14
              yin => std_logic_vector(yin24),  -- sfix27_E14
              idx => std_logic_vector(shift24),  -- ufix6
              xout => xout24,  -- sfix27_E14
              yout => yout24  -- sfix27_E14
              );

  u_Iteration_24 : CORDIC_Iteration_block
    PORT MAP( xin => std_logic_vector(xin25),  -- sfix27_E14
              yin => std_logic_vector(yin25),  -- sfix27_E14
              idx => std_logic_vector(shift25),  -- ufix6
              xout => xout25,  -- sfix27_E14
              yout => yout25  -- sfix27_E14
              );

  Delay_ValidIn_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_ValidIn_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_ValidIn_reg(0) <= validIn;
        Delay_ValidIn_reg(1 TO 25) <= Delay_ValidIn_reg(0 TO 24);
      END IF;
    END IF;
  END PROCESS Delay_ValidIn_process;

  ValidOutDelayed <= Delay_ValidIn_reg(25);

  In_re_signed <= signed(In_re);

  qMapReal <= resize(In_re_signed, 27);

  In_im_signed <= signed(In_im);

  qMapImag <= resize(In_im_signed, 27);

  XQMapped_signed <= signed(XQMapped);

  yQMapped_signed <= signed(yQMapped);

  DelayQuadMapper1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin1 <= XQMapped_signed;
      END IF;
    END IF;
  END PROCESS DelayQuadMapper1_process;


  DelayQuadMapper2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin1 <= yQMapped_signed;
      END IF;
    END IF;
  END PROCESS DelayQuadMapper2_process;


  shift1 <= to_unsigned(16#01#, 6);

  xout1_signed <= signed(xout1);

  yout1_signed <= signed(yout1);

  Pipeline1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin2 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin2 <= xout1_signed;
      END IF;
    END IF;
  END PROCESS Pipeline1_process;


  Pipeline1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin2 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin2 <= yout1_signed;
      END IF;
    END IF;
  END PROCESS Pipeline1_1_process;


  shift2 <= to_unsigned(16#02#, 6);

  xout2_signed <= signed(xout2);

  yout2_signed <= signed(yout2);

  Pipeline2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin3 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin3 <= xout2_signed;
      END IF;
    END IF;
  END PROCESS Pipeline2_process;


  Pipeline2_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin3 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin3 <= yout2_signed;
      END IF;
    END IF;
  END PROCESS Pipeline2_1_process;


  shift3 <= to_unsigned(16#03#, 6);

  xout3_signed <= signed(xout3);

  yout3_signed <= signed(yout3);

  Pipeline3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin4 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin4 <= xout3_signed;
      END IF;
    END IF;
  END PROCESS Pipeline3_process;


  Pipeline3_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin4 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin4 <= yout3_signed;
      END IF;
    END IF;
  END PROCESS Pipeline3_1_process;


  shift4 <= to_unsigned(16#04#, 6);

  xout4_signed <= signed(xout4);

  yout4_signed <= signed(yout4);

  Pipeline4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin5 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin5 <= xout4_signed;
      END IF;
    END IF;
  END PROCESS Pipeline4_process;


  Pipeline4_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin5 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin5 <= yout4_signed;
      END IF;
    END IF;
  END PROCESS Pipeline4_1_process;


  shift5 <= to_unsigned(16#05#, 6);

  xout5_signed <= signed(xout5);

  yout5_signed <= signed(yout5);

  Pipeline5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin6 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin6 <= xout5_signed;
      END IF;
    END IF;
  END PROCESS Pipeline5_process;


  Pipeline5_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin6 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin6 <= yout5_signed;
      END IF;
    END IF;
  END PROCESS Pipeline5_1_process;


  shift6 <= to_unsigned(16#06#, 6);

  xout6_signed <= signed(xout6);

  yout6_signed <= signed(yout6);

  Pipeline6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin7 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin7 <= xout6_signed;
      END IF;
    END IF;
  END PROCESS Pipeline6_process;


  Pipeline6_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin7 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin7 <= yout6_signed;
      END IF;
    END IF;
  END PROCESS Pipeline6_1_process;


  shift7 <= to_unsigned(16#07#, 6);

  xout7_signed <= signed(xout7);

  yout7_signed <= signed(yout7);

  Pipeline7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin8 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin8 <= xout7_signed;
      END IF;
    END IF;
  END PROCESS Pipeline7_process;


  Pipeline7_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin8 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin8 <= yout7_signed;
      END IF;
    END IF;
  END PROCESS Pipeline7_1_process;


  shift8 <= to_unsigned(16#08#, 6);

  xout8_signed <= signed(xout8);

  yout8_signed <= signed(yout8);

  Pipeline8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin9 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin9 <= xout8_signed;
      END IF;
    END IF;
  END PROCESS Pipeline8_process;


  Pipeline8_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin9 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin9 <= yout8_signed;
      END IF;
    END IF;
  END PROCESS Pipeline8_1_process;


  shift9 <= to_unsigned(16#09#, 6);

  xout9_signed <= signed(xout9);

  yout9_signed <= signed(yout9);

  Pipeline9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin10 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin10 <= xout9_signed;
      END IF;
    END IF;
  END PROCESS Pipeline9_process;


  Pipeline9_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin10 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin10 <= yout9_signed;
      END IF;
    END IF;
  END PROCESS Pipeline9_1_process;


  shift10 <= to_unsigned(16#0A#, 6);

  xout10_signed <= signed(xout10);

  yout10_signed <= signed(yout10);

  Pipeline10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin11 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin11 <= xout10_signed;
      END IF;
    END IF;
  END PROCESS Pipeline10_process;


  Pipeline10_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin11 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin11 <= yout10_signed;
      END IF;
    END IF;
  END PROCESS Pipeline10_1_process;


  shift11 <= to_unsigned(16#0B#, 6);

  xout11_signed <= signed(xout11);

  yout11_signed <= signed(yout11);

  Pipeline11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin12 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin12 <= xout11_signed;
      END IF;
    END IF;
  END PROCESS Pipeline11_process;


  Pipeline11_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin12 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin12 <= yout11_signed;
      END IF;
    END IF;
  END PROCESS Pipeline11_1_process;


  shift12 <= to_unsigned(16#0C#, 6);

  xout12_signed <= signed(xout12);

  yout12_signed <= signed(yout12);

  Pipeline12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin13 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin13 <= xout12_signed;
      END IF;
    END IF;
  END PROCESS Pipeline12_process;


  Pipeline12_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin13 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin13 <= yout12_signed;
      END IF;
    END IF;
  END PROCESS Pipeline12_1_process;


  shift13 <= to_unsigned(16#0D#, 6);

  xout13_signed <= signed(xout13);

  yout13_signed <= signed(yout13);

  Pipeline13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin14 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin14 <= xout13_signed;
      END IF;
    END IF;
  END PROCESS Pipeline13_process;


  Pipeline13_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin14 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin14 <= yout13_signed;
      END IF;
    END IF;
  END PROCESS Pipeline13_1_process;


  shift14 <= to_unsigned(16#0E#, 6);

  xout14_signed <= signed(xout14);

  yout14_signed <= signed(yout14);

  Pipeline14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin15 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin15 <= xout14_signed;
      END IF;
    END IF;
  END PROCESS Pipeline14_process;


  Pipeline14_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin15 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin15 <= yout14_signed;
      END IF;
    END IF;
  END PROCESS Pipeline14_1_process;


  shift15 <= to_unsigned(16#0F#, 6);

  xout15_signed <= signed(xout15);

  yout15_signed <= signed(yout15);

  Pipeline15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin16 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin16 <= xout15_signed;
      END IF;
    END IF;
  END PROCESS Pipeline15_process;


  Pipeline15_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin16 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin16 <= yout15_signed;
      END IF;
    END IF;
  END PROCESS Pipeline15_1_process;


  shift16 <= to_unsigned(16#10#, 6);

  xout16_signed <= signed(xout16);

  yout16_signed <= signed(yout16);

  Pipeline16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin17 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin17 <= xout16_signed;
      END IF;
    END IF;
  END PROCESS Pipeline16_process;


  Pipeline16_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin17 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin17 <= yout16_signed;
      END IF;
    END IF;
  END PROCESS Pipeline16_1_process;


  shift17 <= to_unsigned(16#11#, 6);

  xout17_signed <= signed(xout17);

  yout17_signed <= signed(yout17);

  Pipeline17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin18 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin18 <= xout17_signed;
      END IF;
    END IF;
  END PROCESS Pipeline17_process;


  Pipeline17_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin18 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin18 <= yout17_signed;
      END IF;
    END IF;
  END PROCESS Pipeline17_1_process;


  shift18 <= to_unsigned(16#12#, 6);

  xout18_signed <= signed(xout18);

  yout18_signed <= signed(yout18);

  Pipeline18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin19 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin19 <= xout18_signed;
      END IF;
    END IF;
  END PROCESS Pipeline18_process;


  Pipeline18_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin19 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin19 <= yout18_signed;
      END IF;
    END IF;
  END PROCESS Pipeline18_1_process;


  shift19 <= to_unsigned(16#13#, 6);

  xout19_signed <= signed(xout19);

  yout19_signed <= signed(yout19);

  Pipeline19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin20 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin20 <= xout19_signed;
      END IF;
    END IF;
  END PROCESS Pipeline19_process;


  Pipeline19_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin20 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin20 <= yout19_signed;
      END IF;
    END IF;
  END PROCESS Pipeline19_1_process;


  shift20 <= to_unsigned(16#14#, 6);

  xout20_signed <= signed(xout20);

  yout20_signed <= signed(yout20);

  Pipeline20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin21 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin21 <= xout20_signed;
      END IF;
    END IF;
  END PROCESS Pipeline20_process;


  Pipeline20_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin21 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin21 <= yout20_signed;
      END IF;
    END IF;
  END PROCESS Pipeline20_1_process;


  shift21 <= to_unsigned(16#15#, 6);

  xout21_signed <= signed(xout21);

  yout21_signed <= signed(yout21);

  Pipeline21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin22 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin22 <= xout21_signed;
      END IF;
    END IF;
  END PROCESS Pipeline21_process;


  Pipeline21_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin22 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin22 <= yout21_signed;
      END IF;
    END IF;
  END PROCESS Pipeline21_1_process;


  shift22 <= to_unsigned(16#16#, 6);

  xout22_signed <= signed(xout22);

  yout22_signed <= signed(yout22);

  Pipeline22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin23 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin23 <= xout22_signed;
      END IF;
    END IF;
  END PROCESS Pipeline22_process;


  Pipeline22_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin23 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin23 <= yout22_signed;
      END IF;
    END IF;
  END PROCESS Pipeline22_1_process;


  shift23 <= to_unsigned(16#17#, 6);

  xout23_signed <= signed(xout23);

  yout23_signed <= signed(yout23);

  Pipeline23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin24 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin24 <= xout23_signed;
      END IF;
    END IF;
  END PROCESS Pipeline23_process;


  Pipeline23_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin24 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin24 <= yout23_signed;
      END IF;
    END IF;
  END PROCESS Pipeline23_1_process;


  shift24 <= to_unsigned(16#18#, 6);

  xout24_signed <= signed(xout24);

  yout24_signed <= signed(yout24);

  Pipeline24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin25 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin25 <= xout24_signed;
      END IF;
    END IF;
  END PROCESS Pipeline24_process;


  Pipeline24_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin25 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yin25 <= yout24_signed;
      END IF;
    END IF;
  END PROCESS Pipeline24_1_process;


  shift25 <= to_unsigned(16#19#, 6);

  xout25_signed <= signed(xout25);

  reset_1 <=  NOT ValidOutDelayed;

  Pipeline25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin26 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xin26 <= xout25_signed;
      END IF;
    END IF;
  END PROCESS Pipeline25_process;


  -- CSD Encoding (115264216) : 1001'001'00001'01'001011001'01'000; Cost (Adders) = 9
  CSD_Gain_Factor_mul_temp <= ((((((((resize(xin26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 55) - resize(xin26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 55)) - resize(xin26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 55)) - resize(xin26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 55)) - resize(xin26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 55)) + resize(xin26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 55)) + resize(xin26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 55)) + resize(xin26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 55)) - resize(xin26 & '0' & '0' & '0' & '0' & '0', 55)) - resize(xin26 & '0' & '0' & '0', 55);
  CSD_Gain_Factor_cast <= CSD_Gain_Factor_mul_temp(53 DOWNTO 0);
  xoutscaled <= CSD_Gain_Factor_cast(53 DOWNTO 27);

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin27 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF reset_1 = '1' THEN
          xin27 <= to_signed(16#0000000#, 27);
        ELSE 
          xin27 <= xoutscaled;
        END IF;
      END IF;
    END IF;
  END PROCESS Output_Register_process;


  magnitude <= std_logic_vector(xin27);

  DelayValidOut_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      validOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        validOut <= ValidOutDelayed;
      END IF;
    END IF;
  END PROCESS DelayValidOut_process;


END rtl;

