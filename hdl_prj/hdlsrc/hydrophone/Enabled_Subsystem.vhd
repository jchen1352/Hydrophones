-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\hydrophone\Enabled_Subsystem.vhd
-- Created: 2017-07-03 12:54:43
-- 
-- Generated by MATLAB 9.2 and HDL Coder 3.10
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Enabled_Subsystem
-- Source Path: hydrophone/Subsystem/Enabled Subsystem
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Subsystem_pkg.ALL;

ENTITY Enabled_Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In1                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En14
        Enable                            :   IN    std_logic;
        Out1                              :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En14
        Out2                              :   OUT   std_logic
        );
END Enabled_Subsystem;


ARCHITECTURE rtl OF Enabled_Subsystem IS

  -- Component Declarations
  COMPONENT Maximum
    PORT( in0                             :   IN    vector_of_std_logic_vector27(0 TO 1023);  -- sfix27_En14 [1024]
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Maximum
    USE ENTITY work.Maximum(rtl);

  -- Signals
  SIGNAL Enable_out2                      : std_logic;
  SIGNAL In1_signed                       : signed(26 DOWNTO 0);  -- sfix27_En14
  SIGNAL In1_bypass                       : signed(26 DOWNTO 0);  -- sfix27_En14
  SIGNAL In1_last_value                   : signed(26 DOWNTO 0);  -- sfix27_En14
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Tapped_Delay_out1                : vector_of_signed27(0 TO 1023);  -- sfix27_En14 [1024]
  SIGNAL Tapped_Delay_out1_1              : vector_of_signed27(0 TO 1023);  -- sfix27_En14 [1024]
  SIGNAL Tapped_Delay_out1_last_value     : vector_of_signed27(0 TO 1023);  -- sfix27_En14 [1024]
  SIGNAL Tapped_Delay_out1_2              : vector_of_std_logic_vector27(0 TO 1023);  -- ufix27 [1024]
  SIGNAL Maximum_out1                     : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Maximum_out1_signed              : signed(26 DOWNTO 0);  -- sfix27_En14
  SIGNAL Compare_To_Constant_out1         : std_logic;

BEGIN
  u_Maximum : Maximum
    PORT MAP( in0 => Tapped_Delay_out1_2,  -- sfix27_En14 [1024]
              out0 => Maximum_out1  -- sfix27_En14
              );

  Enable_out2 <= Enable;

  In1_signed <= signed(In1);

  Out1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      In1_last_value <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        In1_last_value <= In1_bypass;
      END IF;
    END IF;
  END PROCESS Out1_bypass_process;


  
  In1_bypass <= In1_last_value WHEN Enable_out2 = '0' ELSE
      In1_signed;

  Out1 <= std_logic_vector(In1_bypass);

  enb_gated <= Enable_out2 AND enb;

  Tapped_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Tapped_Delay_out1 <= (OTHERS => to_signed(16#0000000#, 27));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Tapped_Delay_out1(1023) <= In1_signed;
        Tapped_Delay_out1(0 TO 1022) <= Tapped_Delay_out1(1 TO 1023);
      END IF;
    END IF;
  END PROCESS Tapped_Delay_process;


  out0_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Tapped_Delay_out1_last_value <= (OTHERS => to_signed(16#0000000#, 27));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Tapped_Delay_out1_last_value <= Tapped_Delay_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  Tapped_Delay_out1_1 <= Tapped_Delay_out1_last_value WHEN Enable_out2 = '0' ELSE
      Tapped_Delay_out1;

  outputgen: FOR k IN 0 TO 1023 GENERATE
    Tapped_Delay_out1_2(k) <= std_logic_vector(Tapped_Delay_out1_1(k));
  END GENERATE;

  Maximum_out1_signed <= signed(Maximum_out1);

  
  Compare_To_Constant_out1 <= '1' WHEN Maximum_out1_signed > to_signed(16#0002000#, 27) ELSE
      '0';

  Out2 <= Compare_To_Constant_out1;

END rtl;

